// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pkg/security/tests/schemas/container.json
// pkg/security/tests/schemas/container_context.json
// pkg/security/tests/schemas/container_event.json
// pkg/security/tests/schemas/container_path.json
// pkg/security/tests/schemas/datetime.json
// pkg/security/tests/schemas/event.json
// pkg/security/tests/schemas/exec.schema.json
// pkg/security/tests/schemas/file.json
// pkg/security/tests/schemas/host_event.json
// pkg/security/tests/schemas/process.json
// pkg/security/tests/schemas/process_context.json
// pkg/security/tests/schemas/usr.json
// +build functionaltests

package schemas

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataContainerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\xae\xc2\x20\x10\x45\xf7\xfd\x8a\x09\x79\xcb\xd7\x52\x59\xf2\x2b\xc6\x05\xd2\xb1\xa5\x89\x80\xc3\xb8\x30\x86\x7f\x37\x50\xaa\xe9\x8e\x7b\x2f\xe7\x64\xde\x1d\x00\x80\xf8\x4b\x76\xc1\xbb\x11\x1a\xc4\xc2\x1c\x93\x96\x72\x4d\xc1\xf7\x5b\x3d\x04\x9a\xe5\x44\xe6\xc6\x52\x8d\x6a\xec\x4f\x4a\xb6\xff\xff\x0d\x77\x53\x41\x6d\xf0\x6c\x9c\x47\x1a\x0a\xbc\x8f\xfc\x8a\x58\xd6\x70\x5d\xd1\xf2\xde\x46\x0a\x11\x89\x1d\x26\xa1\x61\xbb\xa2\xf6\xd5\xf4\xcb\x07\x43\x62\x72\x7e\x16\xdf\x31\xd7\x57\x6e\x46\xc2\xc7\xd3\x11\x16\xfe\x7c\xf0\xd5\x70\xe9\xf2\x27\x00\x00\xff\xff\x12\xe6\xde\xdb\xec\x00\x00\x00")

func bindataContainerJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataContainerJson,
		"/container.json",
	)
}

func bindataContainerJson() (*asset, error) {
	bytes, err := bindataContainerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/container.json",
		size:        236,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataContainercontextJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xd1\x0a\x82\x40\x10\x45\xdf\xfd\x8a\x61\xe9\x31\x1d\xf3\x71\x7f\x25\x22\x4c\xc7\x5c\x29\x77\x9b\x9d\xa0\x08\xff\x3d\xc6\x55\x21\xe8\x6d\x38\x9c\xb9\xf7\x7e\x32\x00\x00\xb3\x8b\x4d\x4f\xf7\xda\x58\x30\xbd\x48\x88\x16\x71\x88\x7e\xcc\x13\x2e\x3c\x5f\xb1\xe5\xba\x13\xac\xca\xaa\xcc\x0f\x15\x2e\xfe\x7e\x79\x77\xad\xbe\x36\x7e\x94\xda\x8d\xc4\x67\xbd\xe8\x25\x85\x86\xac\x92\xbc\x03\xa9\xe5\x2f\x03\x35\xb2\xd2\xc0\x3e\x10\x8b\xa3\x68\x2c\xa4\x35\x33\xdf\xb2\x7e\x70\x6a\x63\xea\x34\xa8\x73\x37\xb2\x88\xb8\xa9\xa9\x6e\x93\xa7\xf9\x9a\x96\x22\xa6\xc7\xd3\x31\xe9\xd0\xe3\xbf\x9a\x99\x9d\xb2\xe9\x1b\x00\x00\xff\xff\xb9\xfa\x42\x76\x12\x01\x00\x00")

func bindataContainercontextJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataContainercontextJson,
		"/container_context.json",
	)
}

func bindataContainercontextJson() (*asset, error) {
	bytes, err := bindataContainercontextJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/container_context.json",
		size:        274,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataContainereventJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x52\x29\x4e\xce\x48\xcd\x4d\x54\xb2\x52\x50\xca\x28\x29\x29\x28\xb6\xd2\xd7\xcf\x2a\xce\xcf\xd3\x85\x08\xeb\xe5\x17\xa5\xeb\xa7\x14\x25\xa6\x95\xe8\x1b\x19\x18\x19\xe8\x1a\x1a\xe9\x43\xd5\xeb\x40\xb5\x67\xa6\x80\xb4\x26\xe7\xe7\x95\x24\x66\xe6\xa5\x16\xc5\xa7\x96\xa5\xe6\x95\xe8\x81\x8c\x80\x29\x49\xcc\xc9\xf1\x4f\x53\xb2\x52\x88\x06\x73\x41\xa0\x1a\xce\x82\x98\x51\x94\x0a\x92\x57\x4a\xcb\xcc\x49\xb5\xd2\xd7\xd7\xcf\xc8\x2f\x2e\x41\x36\x07\xae\xba\x56\x87\x58\x23\x10\xee\x01\xb1\x52\x2b\x30\x4c\x02\xb3\x62\xb9\x6a\x01\x01\x00\x00\xff\xff\xef\xab\x6c\xf9\x06\x01\x00\x00")

func bindataContainereventJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataContainereventJson,
		"/container_event.json",
	)
}

func bindataContainereventJson() (*asset, error) {
	bytes, err := bindataContainereventJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/container_event.json",
		size:        262,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataContainerpathJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x41\xae\xc2\x30\x0c\x05\xf7\x3d\x85\x15\xfd\x55\xf5\x1b\x97\x2c\x7b\x19\x64\x25\xa6\x09\x08\x27\x72\xbc\x41\x88\xbb\xa3\x88\x76\x3b\x6f\xe6\xbd\x27\x00\x00\xf7\xd7\x63\xe6\x27\xb9\x0d\x5c\x36\x6b\x7d\x43\xbc\xf7\x2a\xcb\x0f\xfb\xaa\x3b\x26\xa5\x9b\x61\x58\xc3\xba\x5c\x02\x1e\xfe\xff\x91\x97\x34\xd2\x58\xc5\xa8\x08\xeb\xb5\x91\x65\x3f\x1e\x4e\xc3\x5e\x8d\x87\xd2\x4d\x8b\xec\x27\x6d\x64\xc6\x2a\x63\xf0\x73\xaa\xf1\xc1\xea\x67\x37\x7d\xbe\x01\x00\x00\xff\xff\x66\xad\xfc\xe4\x96\x00\x00\x00")

func bindataContainerpathJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataContainerpathJson,
		"/container_path.json",
	)
}

func bindataContainerpathJson() (*asset, error) {
	bytes, err := bindataContainerpathJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/container_path.json",
		size:        150,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDatetimeJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x4d\xca\x83\x30\x10\x86\xf7\x9e\x22\x0c\xdf\xd2\x98\x31\x7c\x9b\xe6\x12\x3d\x80\x58\x08\x35\xfe\x14\x8d\x92\xcc\xa6\x48\xee\x5e\xa2\xd6\x62\x4b\x69\xc8\xe2\xcd\xcc\xf3\x90\x77\x4e\x18\x63\x0c\xfe\xfc\xb5\x35\x83\x06\xc5\xa0\x25\x9a\xbc\x12\xe2\xe6\x47\xcb\xd7\x71\x36\xba\x46\x54\x4e\xd7\x24\x24\x4a\xe4\xb9\x14\x1b\x9f\x6e\x7a\x57\x45\xb5\xd2\x64\xa8\x1b\x4c\x16\xdd\xe7\x4e\xf7\xfd\xb9\x06\xc5\x8a\xe5\x19\xcf\xbc\xa7\x05\xa0\xfb\x64\xa2\xed\xc9\x75\xb6\xd9\xb4\x7d\x3b\x69\x22\xe3\x6c\x04\x2e\x05\xf2\x53\x39\xff\x07\xbe\x06\xf9\x0a\xb0\x4b\x21\xfd\xf6\x8f\x1d\x09\xd4\xdb\xf0\x77\x81\x8f\x12\x88\x98\xf3\xe5\xc2\x01\x0c\xc9\x31\x95\x49\x78\x04\x00\x00\xff\xff\x99\x6a\xef\xa9\x5d\x01\x00\x00")

func bindataDatetimeJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatetimeJson,
		"/datetime.json",
	)
}

func bindataDatetimeJson() (*asset, error) {
	bytes, err := bindataDatetimeJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/datetime.json",
		size:        349,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataEventJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xc1\x6e\x85\x20\x10\xbc\xf3\x15\x84\xf4\xf8\xde\xe3\xd5\xa3\xbf\xd2\xf4\x40\x71\xab\x98\x08\x74\x59\x4d\x4c\xe3\xbf\x37\x88\x9a\x58\xc5\x4b\x7b\x9d\xd9\x99\x9d\x81\xfd\x66\x9c\x73\x2e\x5e\x82\x6e\xa0\x53\xa2\xe4\xa2\x21\xf2\xa1\x94\xb2\x0d\xce\xde\x13\xfc\x70\x58\xcb\x0a\xd5\x27\xc9\xe2\x59\x3c\xef\xaf\x85\x5c\xe6\x6f\x8b\xdc\x54\x51\x0a\x03\x58\x7a\x44\xe1\x4a\xd0\xe8\x21\x32\xee\xa3\x05\x4d\x2b\xea\xd1\x79\x40\x32\x10\x44\xc9\x53\x82\x19\x87\x81\x76\x40\xde\x62\x63\x33\x56\x1b\x6f\x55\x07\xa7\xcc\xce\x3b\x10\x1a\x5b\x8b\xc3\xd0\x74\x3b\x3a\x6a\x45\x50\x3b\x1c\xff\xd7\xd5\xf5\xa4\xdd\x9f\xa2\xb2\x8b\x15\x02\xe1\xab\x37\x08\xf1\x97\xde\x32\x8f\x74\x55\xf5\x22\xf0\x8e\x79\x67\x27\x01\x44\xa5\xe8\x58\x2c\x5b\x28\x15\x59\xf4\xe7\xc1\xe7\x43\xf9\xbd\x80\xa5\x00\xd3\x4f\x00\x00\x00\xff\xff\x80\x89\xa3\x61\xd2\x02\x00\x00")

func bindataEventJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataEventJson,
		"/event.json",
	)
}

func bindataEventJson() (*asset, error) {
	bytes, err := bindataEventJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/event.json",
		size:        722,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataExecSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x93\xc1\x4e\xc3\x30\x0c\x86\xef\x7b\x8a\x28\xe2\xb8\xcd\xa3\xc7\xbe\x04\x0f\x80\x26\x14\x5a\x97\x64\x2a\x49\x70\x0c\x62\x9a\xf2\xee\x28\xed\xba\x29\x2c\x85\x1e\xb8\xd1\x53\xfa\xff\xbf\xdd\xaf\xae\x7b\x5a\x09\x21\x84\xbc\x0b\x8d\xc6\x57\x25\x6b\x21\x35\xb3\x0f\x35\xc0\x21\x38\xbb\x19\xe5\xad\xa3\x17\x68\x49\x75\x0c\xd5\xae\xda\x6d\xee\x2b\x38\xe7\xd7\xe7\x72\xd3\xa6\x52\xfc\xc4\x66\x9b\xea\x26\x9d\x8f\x1e\x93\xe1\x9e\x0f\xd8\xf0\xa4\x2a\x7b\x7c\xe8\x64\x2d\x1e\x87\xdb\x74\x9d\x2e\xa7\xb1\x1d\x61\xf2\x65\x67\x7a\xac\x01\xa0\x71\x96\x95\xb1\x48\x4f\xf8\x81\x96\xc7\x47\x5c\x4a\xe2\x7a\x69\x1f\xed\x02\x97\x5b\x0c\xa7\xfd\xc4\xd7\xf7\x3f\xf3\x99\xe4\xe6\xda\xa0\x7b\x72\x1e\x89\x0d\x86\xa2\x3f\x64\x12\xcb\xac\x3b\x3f\xb4\x62\x92\xf0\xed\xdd\x10\xb6\x19\x6b\x31\x79\x9d\xa0\x57\xac\xe5\x6c\x78\x5f\x74\xe2\x8d\x9a\x2b\x31\x67\x94\xac\xd1\x96\x27\xf4\x2b\xf1\x95\xf4\x16\x32\x87\x8b\x0b\x16\x60\xee\x43\xfd\x25\xc6\xe2\x77\xff\xb7\xdb\xf1\xfd\x37\x5b\xc5\xaf\x00\x00\x00\xff\xff\xd0\x6e\xd0\xc8\x76\x04\x00\x00")

func bindataExecSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataExecSchemaJson,
		"/exec.schema.json",
	)
}

func bindataExecSchemaJson() (*asset, error) {
	bytes, err := bindataExecSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/exec.schema.json",
		size:        1142,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataFileJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xc1\x8e\xab\x30\x0c\xbc\xf7\x2b\x10\xea\xb1\x6d\xfa\x7a\xe4\x57\x9e\x56\x55\x16\x4c\x70\x55\x12\xd6\x31\x87\x6a\xd5\x7f\x5f\xa5\xb4\x54\x14\x12\xb2\x5a\x7a\xb5\xe3\xb1\x3d\x0c\xe3\xef\x55\x92\x24\x49\xba\xb6\x79\x05\xb5\x4c\xb3\x24\xad\x98\x1b\x9b\x09\x71\xb2\x46\x6f\xbb\xf0\xce\x90\x12\x05\xc9\x92\xc5\x61\x7f\xd8\x6f\xff\x1d\xc4\xfd\xfd\xe6\x5e\x8e\x85\x2b\x2d\xf1\x0c\x3b\x57\xf7\x88\xf3\xa5\x01\x97\x30\x9f\x27\xc8\xf9\x11\x6d\xc8\x34\x40\x8c\x60\xd3\x2c\xe9\x06\xb8\xc5\x5d\xf9\x20\xe2\xc7\xe8\xb3\x1e\xac\x67\x5e\x72\x35\x99\x19\x60\x5b\x26\xd4\x2a\x1d\x3d\xba\x6e\xc6\x88\x5a\xd6\xe3\x29\xff\x84\x98\x1b\xcd\x12\x35\xd0\x31\x3c\xed\x9a\xa0\x7c\xd0\x9c\x09\x21\x86\x75\x1d\xf1\x51\x0d\x51\x9b\x22\x62\x07\xd4\x0c\x0a\x28\x0e\xb3\x7e\x07\x64\xab\xf9\x78\x93\xd6\x92\xb0\x8e\x3e\x7b\xb1\x0c\xf5\xb2\x9f\xb1\xb5\x40\xcb\x22\x2a\x32\x6d\xb3\x2c\x64\x6d\x0a\x2c\x31\x97\x8c\x46\x1f\x19\x43\x52\x7e\x95\x5b\x21\x19\x5c\xc5\x2f\x84\x96\x57\x52\x2b\x78\x7f\x9f\x02\x2c\xa3\xbe\x2d\x35\x4f\xd7\xa4\x91\xf4\xaf\x66\x0c\xa5\x7f\x17\xd4\xfb\xa8\xa7\x57\xa0\x81\xad\x7a\x90\x36\xf0\x0b\x2c\xdb\x49\x2d\xdb\x69\x32\xe3\xe9\x9f\x12\x7c\xb5\x48\xe0\x06\xf8\x3f\x43\xfb\x0c\x57\x33\x0b\x4e\x66\x3f\xe2\xac\xe3\x2c\x95\x5f\x17\x3d\x33\x92\x48\x5e\x7c\x02\x43\x86\xda\x06\x97\x8c\xe4\xdf\xf7\xdb\xf7\x0b\xc4\x2e\x3a\x88\xbc\xac\x1d\xfe\x2c\xdd\x79\xf5\x1d\x49\xef\xe5\xf1\x9d\x8f\xd0\x0d\x08\x1b\xb9\xcf\x8e\xbd\xa6\x1a\x65\x8d\x33\x8e\x36\xc8\x3e\x79\xed\xf8\xbc\xae\xae\x3f\x01\x00\x00\xff\xff\xcf\xa6\x97\x4e\x5c\x09\x00\x00")

func bindataFileJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataFileJson,
		"/file.json",
	)
}

func bindataFileJson() (*asset, error) {
	bytes, err := bindataFileJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/file.json",
		size:        2396,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataHosteventJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x41\xca\x83\x30\x10\x85\xf7\x9e\x22\x0c\xff\x52\x1d\x7f\x97\xb9\x44\x0f\x50\x8a\x04\x1d\xab\x45\x8d\x64\xa6\xa5\x20\xde\xbd\x44\xad\xb4\xd2\x85\x98\x4d\x26\xf3\xde\xf7\xc2\x1b\x02\xa5\x94\x82\x3f\xce\x2b\x6a\x0d\x68\x05\x95\x48\xcf\x1a\xf1\xc6\xb6\x8b\xe6\x75\x6c\xdd\x15\x0b\x67\x4a\xc1\x34\x49\x93\xe8\x3f\xc5\xc5\x1f\x2e\x78\x5d\x4c\xa8\x65\xc9\xe8\x41\x9d\xc4\x9e\x7e\xab\xa6\x69\x4e\x25\x68\x75\x9e\x9e\xfe\x0c\xeb\x34\xe3\x8e\xbc\x0e\x65\xdd\x90\x46\xc4\x8f\x88\xd5\x38\x86\x7b\x69\x7f\x1f\x86\xef\xec\x0e\xb3\xbd\xb3\x39\x31\x67\xb9\xed\x84\x9e\xfb\x0b\x14\x46\x08\xf4\x66\xfb\xf3\x07\xef\x94\xba\xdd\xd6\x9b\xe2\x83\xef\xe9\x12\x8c\xaf\x00\x00\x00\xff\xff\xd2\xc0\x49\xeb\xdc\x01\x00\x00")

func bindataHosteventJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataHosteventJson,
		"/host_event.json",
	)
}

func bindataHosteventJson() (*asset, error) {
	bytes, err := bindataHosteventJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/host_event.json",
		size:        476,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataProcessJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x4b\x6e\xdb\x30\x10\xdd\xfb\x14\x82\x90\x65\x12\x25\x5e\xfa\x06\x5d\xf5\x00\x86\x61\x30\xd4\xd0\x66\x1a\x7e\x42\x8e\x8a\x1a\x81\xef\x5e\x48\x76\x6c\x4b\xe4\xe8\x6f\xb4\x5b\x91\xf3\xe6\xfb\x86\xa3\xf9\x5a\x24\x49\x92\xa4\x0f\x9e\xef\x41\xb1\x74\x95\xa4\x7b\x44\xeb\x57\x59\xf6\xee\x8d\x7e\x3a\x7d\x7e\x36\x6e\x97\xe5\x8e\x09\xcc\x96\x2f\xcb\x97\xa7\xd7\x65\x76\xbe\xff\x78\x16\x97\x79\x29\x6a\x9d\xe1\xe0\xfd\x73\x29\xfa\x7d\x84\x07\x0b\xe5\x99\x79\x7b\x07\x8e\xdf\x5f\xad\x33\x16\x1c\x4a\xf0\xe9\x2a\x39\xd9\x70\xba\x5d\x01\x5d\x3f\xd4\x20\xa4\x46\xd8\x81\x4b\x2f\xa7\xc7\xc7\xab\x64\x31\x5a\x72\x37\x5e\xa7\x07\x47\x8b\x7a\x74\x52\xef\x08\x9d\xce\x14\x76\x9c\x28\xfc\x01\x5e\x20\x7b\xfb\x80\x2d\x37\x1a\x99\xd4\xe0\xb6\x96\xe1\x3e\x84\x7b\x70\x20\x4a\x38\x21\x3f\x60\x95\x65\x59\xfd\xfe\x29\x4d\x5d\x3a\xe2\xc8\x7d\x0c\xe5\x46\xa9\xc9\x2e\x4a\x6d\x72\x18\x99\x9e\x1b\x18\x65\x0a\x8d\xdb\xd1\x89\x46\x3c\x8c\xf3\x44\x18\xf7\x6b\x8b\x52\x45\x5c\x68\x26\x27\x67\x08\xe5\xcd\x8e\xb4\xcc\x87\xc6\x1d\xe4\xa0\x51\xb2\x0f\x4f\x3b\x57\xa3\xed\xe5\x94\xa0\xef\xe5\x3c\x46\xc6\xee\x88\x47\x8c\xbc\x22\xc6\xa8\x16\x40\x36\x53\xd1\x86\x18\xa3\xfd\x34\x1b\xe3\xa4\x9e\x64\x24\xcc\x1f\x49\x98\x3f\x94\x30\x7f\x2c\xe1\x0e\xc1\x14\x7e\xfe\x68\x0a\x3f\x7f\x38\x85\x9f\x3f\x9e\xc2\xdf\x21\xa0\x9c\xd9\x2d\x08\x01\x1c\xe5\xef\xb0\x27\x05\xd0\xcc\x39\x76\x48\x43\x9c\xea\x92\x44\x50\xf1\x6e\xd2\xdb\x44\xc2\xcc\x4a\xb6\xd0\xf2\xb3\x80\x1f\x67\x25\xe8\x0a\xe8\xed\xa1\x05\xa7\x24\x22\xf4\x48\xc9\xff\xee\xe1\xa2\x05\x28\x75\xf0\x59\x48\x57\xb9\xb9\x8e\xb7\x74\xa2\x8b\x52\x7d\x8b\x6c\x3e\x54\x0b\xa1\xfb\x00\xc9\x66\x9a\x92\x24\xb1\x5a\xd8\xd1\x59\xe3\x9d\x25\x52\x3b\xdf\x74\x8c\x25\x73\x3f\xbb\xd1\x59\x2d\xc0\x1e\xc2\x70\xcd\x22\xc3\xc6\x24\xc4\x8e\x99\xf5\x72\x6f\xd0\xec\xda\xa6\x30\x3e\x41\x06\x3e\x0c\xea\xa6\xea\x1e\x90\xc4\x84\x3a\x0d\xb6\x0c\x9f\x3f\x78\x84\x70\x14\x0f\x80\x87\xa4\x71\xfe\x97\x74\xfe\x37\x4f\x99\x5c\x0a\xc9\x19\x4a\xa3\xe3\x63\x73\x80\x3f\xa8\x92\xf7\x4c\xef\x60\x2a\xf0\x84\x96\x5c\x11\x88\x22\x2d\xc9\x04\xaa\x9c\xdb\x6a\xb2\xbd\xb0\x88\xf2\xe8\xff\x5a\x84\x89\xea\x08\x77\x8f\x2e\x7b\xe9\x17\x03\x7e\x8b\x9b\x3f\x4b\x8b\x1b\xd0\xd4\x68\xf8\x29\x6a\x89\xf8\x1a\xd8\x9d\x87\x14\x38\xf1\xc8\x83\x2e\x4a\x22\xaf\x5f\x37\x13\x2a\xa9\xb2\x24\x1a\xb5\x7f\xe0\x91\x92\x5a\xaa\xca\xa9\x65\x2f\xd6\xd9\x41\x4a\xa7\x46\xe9\xf1\xac\x70\xd3\x28\x8a\xcd\xb9\x28\xa2\x04\xad\xb6\x58\x8d\xd5\x54\x63\xdf\xd4\xb2\x6b\x69\x6e\x50\xda\xf6\x22\x1d\xcb\x0e\xe2\x67\x3f\x3e\x8b\x44\xb7\x16\xd1\xe5\x43\x2d\x02\x39\x58\xd0\x39\x68\x1e\xec\xf2\xda\x16\x55\xeb\x1b\x7e\x6e\x08\xd6\xae\x5b\x10\x4e\xf9\x38\x2e\x8e\x7f\x03\x00\x00\xff\xff\xb7\x7e\x45\x3e\xc0\x14\x00\x00")

func bindataProcessJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataProcessJson,
		"/process.json",
	)
}

func bindataProcessJson() (*asset, error) {
	bytes, err := bindataProcessJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/process.json",
		size:        5312,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataProcesscontextJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\x41\x6e\xc3\x20\x10\x45\xf7\x3e\x05\x42\x5d\x26\x21\xf5\x92\x4b\xf4\x00\x55\x55\x51\x3c\x6e\x88\x1c\xa0\xc3\x54\x6a\x14\xe5\xee\x15\x06\x5b\x8d\x8c\x9d\x34\xf1\xf2\xf3\xff\xd7\x1b\x18\x9f\x2a\xc6\x18\xe3\x4f\x41\xef\xe0\xa0\xb8\x64\x7c\x47\xe4\x83\x14\x62\x1f\x9c\x5d\x27\x79\xe3\xf0\x53\x34\xa8\x5a\x12\xf5\xb6\xde\xae\x9f\x6b\x91\xfd\xab\x1c\x37\x4d\x8c\x7a\x74\x1a\x42\x78\xd7\xce\x12\xfc\xd0\x26\x56\x0c\x16\x3a\x7a\x88\x1e\xf7\xb1\x07\x4d\x83\xea\xd1\x79\x40\x32\x10\xb8\x64\x89\x65\xd0\x63\xd3\x85\xd8\x1f\xa8\xae\x7b\x69\xb9\x64\xaf\x17\x72\xfc\x4e\x13\x25\xa1\x21\x44\x3f\x6f\x4d\x07\x52\x08\x91\x9b\x13\xdb\x24\x72\x5e\xdd\xda\x3b\x43\x3e\xf5\x29\x04\x4b\x8b\x9e\x3b\x38\x17\x78\xc7\x46\x65\x35\x04\x72\xb8\x0c\xc8\xfe\x3e\x8e\x42\x54\x47\x3e\xdf\xd9\x9b\x0d\xc1\xe1\x7a\xe7\x03\x43\xf5\x83\xdd\x35\x72\x5c\x3c\x65\x2c\xe0\xff\xef\x7b\x8c\x5e\xbb\xf1\xe2\xc9\x0c\x14\x47\xf8\xfa\x36\x08\x4d\x71\x63\x47\x57\xde\x91\x9b\xde\xb2\xe8\x79\x9b\x2e\x72\x55\x3e\x4f\x7a\xc6\x2d\xe3\x8d\x3f\x5f\x95\xa2\xe7\xdf\x00\x00\x00\xff\xff\x69\x16\x74\x58\x24\x04\x00\x00")

func bindataProcesscontextJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataProcesscontextJson,
		"/process_context.json",
	)
}

func bindataProcesscontextJson() (*asset, error) {
	bytes, err := bindataProcesscontextJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/process_context.json",
		size:        1060,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataUsrJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8f\x4d\x0e\x82\x30\x10\x85\xf7\x3d\x45\xd3\xb8\x04\x8a\x2c\xb9\x8a\x71\x81\x30\x40\x89\xd2\x3a\x33\x2c\x8c\xe1\xee\xa6\xfc\x25\x0d\xe2\xc6\xed\xf7\xfa\xbe\x79\x7d\x0b\x29\xa5\x54\x27\x2a\x5b\x78\x14\x2a\x97\xaa\x65\x76\x94\x6b\xdd\x91\xed\xe3\x19\x27\x16\x1b\x5d\x61\x51\xb3\xce\xd2\x2c\x8d\xcf\x99\x5e\xde\x47\x4b\xdd\x54\xbe\x5a\x9b\x3b\x24\xbe\xb7\x72\x7e\x39\xf0\x81\xbd\x75\x50\xf2\x4a\x1d\x5a\x07\xc8\x06\x48\xe5\x72\x1e\x30\xf1\x81\x30\x00\xc7\x8a\x2d\x3d\x50\x6d\xf9\xb4\x6b\xcf\x03\x33\x31\x9a\xbe\x51\xbb\x47\x63\xb4\xf7\x35\x68\x07\xf7\x87\x52\xfc\x38\xa0\x10\x9e\x83\x41\xf0\x93\x2f\x5f\xbf\x72\x38\x28\xe0\x57\x11\x9e\x1b\xc5\xf8\x09\x00\x00\xff\xff\xd2\xf0\x69\x81\xe6\x01\x00\x00")

func bindataUsrJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataUsrJson,
		"/usr.json",
	)
}

func bindataUsrJson() (*asset, error) {
	bytes, err := bindataUsrJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/usr.json",
		size:        486,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/container.json":         bindataContainerJson,
	"/container_context.json": bindataContainercontextJson,
	"/container_event.json":   bindataContainereventJson,
	"/container_path.json":    bindataContainerpathJson,
	"/datetime.json":          bindataDatetimeJson,
	"/event.json":             bindataEventJson,
	"/exec.schema.json":       bindataExecSchemaJson,
	"/file.json":              bindataFileJson,
	"/host_event.json":        bindataHosteventJson,
	"/process.json":           bindataProcessJson,
	"/process_context.json":   bindataProcesscontextJson,
	"/usr.json":               bindataUsrJson,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"container.json":         {Func: bindataContainerJson, Children: map[string]*bintree{}},
		"container_context.json": {Func: bindataContainercontextJson, Children: map[string]*bintree{}},
		"container_event.json":   {Func: bindataContainereventJson, Children: map[string]*bintree{}},
		"container_path.json":    {Func: bindataContainerpathJson, Children: map[string]*bintree{}},
		"datetime.json":          {Func: bindataDatetimeJson, Children: map[string]*bintree{}},
		"event.json":             {Func: bindataEventJson, Children: map[string]*bintree{}},
		"exec.schema.json":       {Func: bindataExecSchemaJson, Children: map[string]*bintree{}},
		"file.json":              {Func: bindataFileJson, Children: map[string]*bintree{}},
		"host_event.json":        {Func: bindataHosteventJson, Children: map[string]*bintree{}},
		"process.json":           {Func: bindataProcessJson, Children: map[string]*bintree{}},
		"process_context.json":   {Func: bindataProcesscontextJson, Children: map[string]*bintree{}},
		"usr.json":               {Func: bindataUsrJson, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
